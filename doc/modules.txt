Paper Plane xUI Script Module Javascript modules Document
===============================================================================

スクリプト内で読み込んで使用する関数群です。

/* 読込み用の処理 */
var st = PPx.CreateObject('ADODB.stream');
var module = function (filepath) {
  var data;

  st.Open;
  st.Type = 2;
  st.Charset = 'UTF-8';
  st.LoadFromFile(filepath);
  data = st.ReadText(-1);
  st.Close;

  return Function(' return ' + data)();
};

// モジュールごとの読み込み
var xxx = module(PPx.Extract('%*getcust(S_ppm#global:ppm)\\module\\%*getcust(S_ppm#global:scripttype)\\xxx.js'));
module = null;

===============================================================================
CONTENTS

	util.js
	ppm.js  (改名) 22/07/05 plugin > ppm
	gitm.js
	input.js

===============================================================================
util.js

ライブラリと同等の関数およびADODB.streamを使用する関数を実装

プロパティ

	Array.prototype.trim	polyfill (jscriptのみ)
	Array.prototype.indexOf	polyfill (jscriptのみ)

	(Stringメソッドに変更) 22/11/27
	(改名) fmt > metaRegexp 22/07/05
	String.prototype.metaRegexp	文字エスケープ
		key: esc | norm

	(Stringメソッドに変更) 22/11/27
	(改名) newline > metaNewline 22/07/05
		js > esc, adodb > ansi
	String.prototype.metaNewline	改行文字コード変換
		key: esc | ppx | ansi

メソッド

	.script	実行中のスクリプトの情報
		{name:スクリプトファイル名、path:親ディレクトリパス}
		arguments:

		(削除)	22/11/27
	.plugScript	プラグイン固有のスクリプトパスを返す
		arguments: 0=プラグイン名, 1=スクリプト名

	(変更) 改行コードを指定できるようにした
	.quitMsg	メッセージを表示して終了 .callまたは.apply経由
		arguments: {newline: "改行コード"}
		array=一行ごとのメッセージ

	.error	ライブラリerrors.jsを実行して終了
		arguments: 0=errors.jsのメソッド名

	.log	PPcログ窓 > PPb > PPcステータス行 の優先度でログを表示
		arguments: 0=メッセージ, 1=改行コード

	.fileexists	ファイルの存在確認をして真偽値を返す
	 FileSystemObject.FileExistsより低速
		arguments: 0=ファイルパス

	.extract	指定したPPx上で%変数を展開して返す
		arguments: 0=PPxID, 1=%%変数

	.extractJS	指定したPPx上でPPx.XXXを展開して戻り値を返す
		arguments: 0=PPxID, 1=メソッド名(PPx.XXXの部分)

	.expand	指定したPPx上でコマンドを実行し終了コードを返す
		戻り値:0 or 1223
		arguments: 0=PPxID, 1=コマンド

	.execute	指定したPPx上でコマンドを実行
		arguments: 0=PPxID, 1=コマンド

	.setc	PPx.Execute('*setcust prop')の簡略化
		arguments: 0=プロパティ名

	.getc	PPx.Extract('%*getcust(prop)')の簡略化
		arguments: 0=プロパティ名

	.lib	ライブラリの実行 .callまたは.apply経由
		arguments: ライブラリの引数

	.reply	ライブラリの実行(戻り値あり) .callまたは.apply経由
		arguments: ライブラリの引数

	.print	PPeでメッセージを表示 .callまたは.apply経由で使用
		arguments: {cmd=ppe|edit, title=タイトル, tab=タブ数},
                array=一行ごとのメッセージ

	.printw	PPeでメッセージを表示(ファイル出力あり) .callまたは.apply経由
	 文字数制限対策のため、メッセージを一旦ファイルに出力して読み込む
		arguments: {cmd=ppe|edit, title=タイトル, tab=タブ数},
                array=一行ごとのメッセージ

	(改名) esc > esconv 22/07/05
	.esconv	文字列エスケープ
		arguments: 0=obj.fmtのプロパティ名, 1=文字列

	(改名) check_linefeed > linefeedback 22/07/05
	.linefeedback	改行を含む文字列の改行コード判別
		arguments: 0=文字列

        (改名) lines > readLines 22/07/05
	.readLines	UTF-8エンコードのファイルを読み込み一行ごとに配列にして返す
	 .callまたは.apply経由
	 改行コードが判別できないときは空文字を返す
		{data:配列データ, newline:ファイルで最初に使用された改行コード}
		arguments: 0=ファイルパス

	.append	配列を要素ごとに改行してファイルの末尾に追加 .callまたは.apply経由
	 %'temp'およびS_ppm#global:cache以下のファイルのみ対象とする
		{filepath:出力ファイル, newline:改行コード},
		array=一行ごとの追加文字列

	.write	配列を要素ごとに改行してファイルに出力 .callまたは.apply経由
	 %'temp'およびS_ppm#global:cache以下のファイルのみ対象とする
		{filepath:出力ファイル, newline:改行コード},
		array=一行ごとの文字列

	(version0.9で削除予定) mod/input.jsに更新
	.input	%*inputの結果に、["%]のエスケープを追加した文字列を返す
	 .callまたは.apply経由
		{
			type: エスケープ対象(0="|1="%),
			text: 文字列,
			title: タイトル,
			mode: editmode,
			select: カーソル・選択範囲,
			k: %*inputのオプション-kの内容
		}

	.auxlocalpath	リストファイルではないaux:パスからローカルパスを取得
	 該当しないときは空文字を返す
		arguments: 0=aux:パス

	.basepath	リストファイルのBaseパスを取得
	 Baseパスがないときは空文字を返す
		arguments: 0=リストファイルのパス

	.interactive	対話形式のダイアログを表示して真偽値を返す
		戻り値:boolean
		arguments: 0=ダイアログタイトル, 1=メッセージ

===============================================================================
ppm.js

プラグインの設定・削除に共通するコマンド関数
*linecustで処理できるコマンド内の文字数は凡そ500文字の制限があり、
これを回避するため*linecust相当の関数を実装

メソッド

	Array.prototype.indexOf	polyfill (jscriptのみ)

	(改名) complete > complcode 22/07/05
	.complcode	文字列補完
		arguments: 0=obj.fmtのプロパティ名, 1=文字列

	(改名) check_linefeed > linefeedback 22/07/05
	.linefeedback	改行を含む文字列の改行コード判別
		arguments: 0=文字列

	(改名) lines > readLines 22/07/05
	.readLines	UTF-8エンコードのファイルを読み込み一行ごとに配列にして返す
	 .callまたは.apply経由
		{data:配列データ, newline:ファイルで最初に使用された改行コード}
		arguments: 0=ファイルパス

        (改名) unset > unsetLines, addline > addCmdline, deleteline > delCmdline 22/07/06
	.unsetLines	PPxからプラグインの設定を削除する
        	arguments: 0=プラグイン名, 1=ドライランのフラグ

	.addCmdline	*linecustコマンドを変換してプロパティに追加
		arguments: カンマ区切りの*linecustコマンド

	.delCmdline	path(指定なしはppm\unset\linecust.cfg)の内容をプロパティから削除
		arguments: {
			path: 削除する%mを羅列したファイルのパス,
			name: 削除する%mを限定)
                }

===============================================================================
gitm.js

gitのレポジトリ情報を取得する関数を実装

メソッド

	.root	リポジトリのルートパスを返す
		arguments: 0=リポジトリのパス

	.branch	アクティブブランチ情報を返す
	 非リポジトリの場合は、{name '-', state: ''}を返す
		戻り値: {name: ブランチ名, state: ブランチの状態}
		arguments: 0=リポジトリルートパス

	.head	最新コミットのハッシュを返す
		arguments: 0=リポジトリルートパス, 1=ブランチ名

===============================================================================
input.js

一行編集を呼び出す関数を実装

メソッド

	.addkey	一行編集に追加キーバインドを設定する
		arguments: 0=設定キー, 1=コマンド, 2=キーの説明文

	.lied	一行編集を呼び出し編集した文字列を返す
	 .addkeyまたは補完リストが設定されていると追加キーが有効になる
	 - 追加キーは起動ごとにリセットされる
	 - 補完リストにファイル名のみ指定したときは
	   S_ppm#global:cache\listが検索される
		arguments: {
			esc: 編集後の文字列を補完する
				0= '"'を補完(デフォルト)
				1= '"%'を補完
			text: 編集文字列初期値
			title: 一行編集タイトル
			mode: 編集に使用するヒストリ
			select: 編集開始時の文字列選択状態
			listname: 補完リストパス
			k: 一行編集開始時に実行するコマンド
                }

===============================================================================
