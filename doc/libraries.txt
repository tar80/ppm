Paper Plane xUI Script Module JavaScript Libraries
===============================================================================

*script、%*script()で呼び出して使えるスクリプトです。

===============================================================================
CONTENTS

	adjacentWindow.js
	checkPid.js
	countEntries.js
	cryptXOR.js
	discardStayMode.js
	errors.js
	exeExists.js
	expandSource.js
	getEntries.js
	input.js
	lfActions.js
	lfDset.js
	lfMetadata.js
	lfSyncview.stay.js @deprecated
	libExists.js
	menu.js
	restorePPv.js
	seeProcess.js
	setsel.stay.js
	spinner.js
	stackPPb.stay.js
	toggleOpacity.js
	vehandler.js

===============================================================================
adjacentWindow.js
条件を判別してPPc,PPv,PPbの順番で次のIDにフォーカスします

@arg 0 {number} - 0以外のとき逆順でフォーカス
@arg 1 {number} - 0以外のときPPcの反対窓がなければ起動
@arg 2 {number} - 0以外のとき連動ビューのペア間でフォーカス移動
@arg 3 {number} - 0以外のときPPcのタブを無視
@arg 4 {number} - 0以外のときPPcのIDを無視
@arg 5 {number} - 0以外のときPPvのIDを無視
@arg 6 {number} - 0以外のときPPbのIDを無視

===============================================================================
checkPid.js
指定したプロセスidが存在しているか確認して返します。

@arg 0  {string}  - プロセスIDを指定
@return {boolean} - プロセスが存在していればtrue

===============================================================================
countEntries.js
指定ディレクトリ配下のエントリ数を返します。

@arg 0  {string} - ディレクトリパスを指定
@arg 1  {string} "both"(default)|"dir"|"file" - 対象とするファイル属性を指定
@arg 2  {number} - 取得上限を設定
@return {number} - エントリ数

===============================================================================
cryptXOR.js
XOR暗号化・複合化です。暗号としての強度はありません。
平文で記録したくない文字列などに使用します。
暗号化・複合化した文字列を返します。

@arg 0  {number} - 暗号化・複合化キーを指定
@arg 1  {string} - 暗号化・複合化する文字列を指定
@return {string} - 暗号化・複合化済み文字列

===============================================================================
discardStayMode.js
ppmdev/modules/staymode.tsのatDebounce関数から実行される前提のスクリプトです。
指定されたインスタンスを破棄(PPx.StayMode=0)します。

@arg 0 {string} - インスタンスの実行元PPxIDを指定
@arg 1 {number} - PPx.StayModeが返すスクリプトのインスタンス番号を指定
@arg 2 {string} - "DEBUG"を指定すると、デバッグメッセージを表示

===============================================================================
errors.js
エラー情報を表示します。
distディレクトリ配下(dist/xxx.js)のスクリプトから実行されたときは、
ソース側(src/xxx.ts)のコメントを参照します。

@arg 0 {string} - "arg"|"msg" - 実行するメソッド名を指定
	arg: ソーススクリプト行頭のコメントから" * @arg"を読み取り引数情報を表示
	msg: メッッセージを表示
@arg 1 {string} - 対象ファイルのパスを指定
@arg 2 {string} - arg0で"msg"を指定したときに表示されるメッセージを指定

===============================================================================
exeExists.js
実行ファイルにパスが通っているか確認して返します。

@arg 0+ {string} - 確認する実行ファイル名をカンマ区切りで指定
@return {string} - JSON形式のリスト
	{ "1.exe": true, "2.exe": false, ... }

===============================================================================
expandSource.js
S_ppm#sourceから値を抽出します。

@arg 0  {string} - プラグイン名を指定
@arg 1  {string} - 抽出するフィールド名を指定
@return {string} - 抽出したフィールドの値。値がないときは空文字を返す
                   引数が間違っている、指定したプラグインが存在しないときなどは
                   "[error]"が返る

===============================================================================
getEntries.js
指定したディレクトリ内のファイル名をカンマ区切りで返します。
速度に問題があるためファイル数の多いディレクトリへの再帰検索は非推奨。

@arg 0  {string} - ディレクトリパスを指定
@arg 1  {string} "both"(初期値)|"dir"|"file" - 対象とするファイル属性を指定
@arg 2  {number} - パスの絞り込み対象となる文字列を指定(大小文字無視)
@arg 3  {number} - 0以外を指定するとディレクトリを再帰的に検索する
@return {string} - 配列形式のリスト
	[ "dir1", "dir2", "file1", "file2", ...]

===============================================================================
input.js
%*input(... -k *completelist ...)を実行します。

@arg 0  {object} - オブジェクトをJSON形式で指定
@return {string} - 入力結果。exitcodeが0以外なら"[error]"を返す

引数は"{'key':'value'}"、または"{""key"":""value""}"の形式で記述します。
valueの型は、string|booleanのどちらかです。
string型はクオートで括り、boolean型は括りません。
以下はkey,{type},value初期値のリストです。
{
  "text":        {string}  "",
  "title":       {string}  "ppm/input.js",
  "mode":        {string}  "e",
  "select":      {string}  "a",
  "k":           {string}  "",
  "forpath":     {boolean} false,
  "fordigit":    {boolean} false,
  "leavecancel": {boolean} false,
  "multi":       {boolean} false,

  "list":        {string}  "off",
  "module":      {string}  "off",
  "match":       {string}  "",
  "detail":      {string}  "",
  "file":        {string}  "",

  "autoselect":  {boolean}  false,
}

%*input()のオプション、*completelistのオプション、autoselectが含まれます。

引数"autoselect"がtrueのとき、補完リストが表示中かつ非選択状態でEnterキーを押す
と第一候補が自動で選択されます。

引数"file"が設定されているとき、Ctrl+Oキーを押すとPPeで補完候補リストの編集を
Ctrl+Sキーを押すと編集内容を補完候補リストに追加保存します。

入力バーの終了時にK_ppmTempとM_ppmTempを削除します。

===============================================================================
lfActions.js
リストファイル上のマークエントリに対し、コマンドを実行します。

@arg 0 {string} - S_ppm#actionsのコマンドアイリアスを指定
@arg 1 {"enclose"|"double"|"escape"} - 空白を含むパスの処理方法を指定
	"enclose"	ダブルクオートで括る
	"double"	ダブルクオート2つで括る
	"escape"	バックスラッシュでエスケープする
@arg 2 {number} - If non-zero, allow duplicate paths
	0以外を指定したとき、重複したパスを実行対象に含める

===============================================================================
lfDset.js
指定したListFileのメタデータを取得しメタデータ"cmd:"の値を返します。
メタデータ"cmd:"が見つからないときは、*viewstyle -temp "@arg0"を実行し、
仮想エントリリストのときは、veHandler.stay.jsを常駐します。

@arg 0 {string} - 通常ListFileのViewStyleを指定
@arg 1 {"sjis"|"utf8"|"utf16le"(default)} - リストファイルのエンコードを指定
@return {string} - メタデータ"cmd"の値

===============================================================================
lfMetadata.js
指定したListFileの指定されたメタデータを取得して返します
メタデータが存在しない場合は、""(空文字)を返します

@arg 0 {string} - リストファイルのパスを指定
@arg 1 {string} - メタデータの名前を指定
@arg 2 {"sjis"|"utf8"|"utf16le"(default)} - リストファイルのエンコードを指定
@return {string} - 指定されたメタデータの値

===============================================================================
lfSyncview.stay.js @deprecated
仮想エントリ形式のリストファイル上で連動ビューを実行します
再実行したときと、PPvが終了したときに常駐が破棄されます

インスタンス番号: 80000
@arg 0 {string} - 連動ビューのトリガ・キー(default:"@\Y")
 仮想エントリ形式のリストファイルでない場合に実行されるキー
@arg 1 {number} - PPvの起動位置。0=通常, 1=反対窓に被せる, 2=反対窓にキャプチャ
@arg 2 {number} - 1を指定したとき、連動ビュー終了時にPPvを終了
@arg 3 {string} - "DEBUG"を指定すると、デバッグメッセージを表示

===============================================================================
libExists.js
PPxインストールディレクトリ配下にライブラリが存在しているか確認して返します。

@arg 0+ {string} - 確認するライブラリ名をカンマ区切りで指定
@return {string} - JSON形式のリスト
	{ "1.dll": true, "2.dll": false, ... }

===============================================================================
menu.js
メニュー項目を操作します。

@arg 0  {sring}  "insert"|"replace"|"delete" - 実行するメソッド
@arg 1  {sring}  - メニューID
@arg 2  {number} - メニュー番号
@arg 3  {sring}  - メニューSubID
@arg 4  {sring}  - 実行するコマンド
@return {string} - 実行結果メッセージ


===============================================================================
restorePPv.js
PPbから呼び出します。
PPv終了後に起動位置とタイトルバーを復元します。

@arg 0 {string} - PPvIDを指定
@arg 1 {string} - _WinPos:Vの値を指定
@arg 2 {number} - "DEBUG"を指定したとき、デバッグメッセージを表示します

===============================================================================
seeProcess.js
指定プロセスが起動するまで待機します。
凡そ500ミリ秒ごとにプロセスの起動を確認します。
待機時間を0に設定したときは一度だけプロセスを確認して終了します。

@arg 0  {string}  - プロセス名を指定
@arg 1  {number}  - 待機時間を指定(初期値:6000)
@arg 2  {string}  - 起動後に実行するコマンドラインを指定
@arg 3  {number}  - GUIの起動状態を指定。(WScript.Shell.Runのstyle値)
@return {boolean} - スクリプト実行時にプロセスが起動済みならtrue

===============================================================================
setsel.js @deprecated
正規表現で指定した範囲を選択状態にします。

@arg 0 {string} - 正規表現 "(<範囲の前の文字列>)(範囲選択する文字列>)"
@arg 1 {number} - 0以外のとき、複数行の範囲選択を受け付ける
@arg 2 {number} - 0以外のとき、常駐する

===============================================================================
setsel.stay.js
正規表現で指定した範囲を選択状態にします。

@arg 0 {string} - 正規表現 "(<範囲の前の文字列>)(範囲選択する文字列>)"
@arg 1 {number} - 0以外のとき、複数行の範囲選択を受け付ける

===============================================================================
spinner.js
PPcのステータス行にテキストアニメーションを表示します。
PPbからの呼び出し時のみ実行されます。実行されると
*string i,<user_spec>=1が設定され、%si'<user_spec>'が空になると終了します。
  %Od *ppb -c *script %sgu'ppm'\dist\lib\spinner.js,CA,dot,<user_spec> で開始。
  *execute CA,*string i,<user_spec>= で終了。

@arg 0 {string} - スピナーを表示するPPcのIDを指定
@arg 1 {string} - 表示するスピン名を指定。dot|star|block|toggle|triangle|line
@arg 2 {string} - スピンの破棄に使用する特殊環境変数iの名前を指定

===============================================================================
stackPPb.stay.js
PPbを非同期に実行し、指定された起点から整列して積み上げます。J,K,L,M,Nの5つのID
を使用し5枚まで同時に実行します。6-30までのタスクはIDに空きがでるまで待機します。
30以上のタスクはキャンセルされます。
ユーザーイベントDoneStackPPbを発行します。すべてのタスクが終了したときに
S_ppm#event:DoneStackPPbを起動元のPPc上で実行します。
例として、タスクの終了時にエントリリストの更新をする場合は、事前に
*setcust S_ppm#event:DoneStackPPb=%K"@F5"を実行しておきます。
S_ppm#event:DoneStackPPbは実行後に削除されるプロパティです。
また引数なしで実行すると待機状態のタスクを強制終了します。

インスタンス番号: 80003
ユーザーイベント: DONE:DoneStackPPb
@arg 0 {number} - PPbの横幅(初期値:400)
@arg 1 {string} - PPbの積み上げ起点位置。NW(左上)|NE(右上)|SW(左下)|SE(右下)|MIN
@arg 2 {string} - PPb上で実行するコマンドを指定
@return {string} - "DONE:DoneStackPPb,"

===============================================================================
toggleOpacity.js
起動したPPxの不透明度を (高) > (低) > 100 の順にトグルします。

@arg 0 {number} - 不透明度(高)を指定(初期値:90)
@arg 1 {number} - 不透明度(低)を指定(初期値:80)

===============================================================================
veHandler.js
仮想エントリリストのバックグラウンドに常駐し操作を補助します。

インスタンス番号: 80001
@arg 0 {string} - Matadata base
@arg 1 {string} - Metadata dirtype
@arg 2 {string} - Metadata search
@arg 3 {string} - Metadata ppm
@arg 4 {string} - Metadata mapkey
@arg 5 {string} - Metadata freq

===============================================================================
