Paper Plane xUI Script Module Javascript Libraries Document
===============================================================================

*script、%*script()で呼び出して使えるスクリプトです。
ppm version 1.0.0で削除されます。

===============================================================================
CONTENTS

	append_utf8.js
	collect_entries.js
	delete_si.js
	entity_path.js
	errors.js
	escape.js
	exists.js
	exe_exists.js(jscriptのみ)
	files.js(削除。get_entries.vbsで代用)
	getcwd.js
	getversion.js
	highlight_this.js
	input.js
	menu.js
	module_exists.js(jscriptのみ)
	opacity.js
	print.js
	range_utf8.js
	read_utf8.js
	repository.js
	setsel.js
	toggle_viewstyle.js
	spinner.js
	stdout.js
	stdoutw.js
	version.js(jscriptのみ)
	waitRun.js(削除予定。see_process.vbsで代用)
	write_utf8.js
	see_pid.vbs
	see_process.vbs
	get_entries.vbs
	count_entries.vbs

===============================================================================
append_utf8.js

指定したファイルにUTF-8エンコードで行を追加します。
改行コードを指定でき、ファイル末の空行を削除するオプションがあります。
%'temp'およびS_ppm#global:cache以下のファイルのみ対象とします。

	第一引数はファイルパスを指定
	第二引数は改行コードを指定
		lf|unix, cr|mac, crlf|dos, match(ファイルの最初の改行コード)
	第三引数は"0"以外を指定するとファイル末の空行を削除します
	第四引数以降は一行ごとの文章をコンマ区切りで指定します
	 "FDC"だけ指定すると、マークしたエントリを行ごとに保存します

===============================================================================
collect_entries.js

マークしたエントリの指定した要素をコンマ区切りのリストで返します。
マーク数の上限、下限を設定できます。デフォルトは制限なしです。

	第一引数はマーク数を指定
	第二引数は算術演算子を指定
		"-": 第一引数以下
		"+": 第一引数以上
		"=": 第一引数と同数
	第三引数は収集する要素を指定
		Name|ShortName|Attributes|Size|State|ExtColor|Date...|Comment

===============================================================================
delete_si.js

KC_main:ACTIVEEVENTに、引数で指定された特殊環境変数siを削除する設定を追加します。
追加された設定はACTIVEEVENT実行後に削除されます。一行編集終了後にsi変数を削除
したいときに使用します。

	第一引数は*linecustのラベルを指定
	第二引数以降は削除するsi変数を指定

===============================================================================
entity_path.js

エントリがリンクならリンク先を、実体ならそのパスを返します。

===============================================================================
errors.js

エラー情報を返します。

	第一引数はメソッドを指定
		arg: スクリプト行頭のコメントから" * @arg"を読み取り引数情報を返す

===============================================================================
escape.js

文字列を表記法に応じた文字に変換して返す。

	第一引数は対象とする表記法
		esc: 文字 > 正規表現メタ文字
		nor: 正規表現メタ文字 > 文字
		q: " > ""
		qp: "% > ""%%
	第二引数は対象となる文字列
		a: 第三引数
		s: %*selecttext()
		e: %*edittext()
	第三引数は第二引数がaのときに対象となる文字列

===============================================================================
exists.js

ファイル(ディレクトリ)が存在するかどうか確認して、真偽値もしくは存在しないパス
を返します。

	第一引数は戻り値の内容を指定
		bool: 真偽値
		path: 存在しないパス
	第二引数は属性を指定
		file, dir, both
	第三引数以降は対象とするパスをコンマ(,)区切りで指定

===============================================================================
exe_exists.js(jscriptのみ)

実行ファイルにパスが通っているかどうかを確認して返します。

	第一引数は戻り値の内容を指定
		0: "executable_name": bool,の形式で全ての実行ファイルを返す
		1: パスを確認できた実行ファイルのコンマ区切りリストを返す
		2: パスを確認できなかった実行ファイルのコンマ区切りリストを返す
	第二引数は戻り値に説明文を付属するかどうかを指定
		0: 説明文なし
		1: 説明文あり
	第三引数以降は確認する実行ファイルのリスト

===============================================================================
getcwd.js

エントリの実際の親ディレクトリを返します。
リストファイルやaux:パス上のエントリに対して実行します。

	第一引数 パス区切り文字を指定
		"\"(デフォルト), "/"

===============================================================================
getversion.js

プラグインのバージョンを返します。取得できないときの値は"???"になります。

	第一引数はプラグイン名を指定

===============================================================================
highlight_this.js

カーソル下エントリの指定した要素と同値を持つエントリをハイライトします。
7つまでの結果を色分けして表示できます。8つめ以降はハイライト8番が使われます。

	第一引数は要素の指定
		Name|ShortName|Attributes|Size|State|ExtColor|Comment

===============================================================================
input.js

%*input()を実行し、入力した文字に["%]のエスケープを追加した文字列を返します。

	第一引数はエスケープ対象を指定
		0: "
		1: "%
	第二引数は一行編集の初期入力値
	 値に " を含む場合は """"、%を含む場合は %% とする必要がある
	第三引数は一行編集のタイトル
	第四引数はeditmodeのオプション値
	第五引数はカーソル位置・選択範囲
	第六引数は補完リストのパスを指定
	第七引数はオプション-kの内容

===============================================================================
menu.js

指定したメニューの指定位置にある項目を操作します。

	第一引数は操作内容を指定
		add: 項目を追加
		del: 項目を削除
		ex: 項目を変更
	第二引数はメニュー名を指定
	第三引数はメニュー位置を指定
	第四引数は項目の内容を指定
	第五引数に"1"を指定するとテスト実行

===============================================================================
module_exists.js

PPxModuleがインストールされているかどうかを確認して返します。

	第一引数は戻り値の内容を指定
		0: "module_name": bool,の形式で全てのモジュール名を返す
		1: パスを確認できたモジュールのコンマ区切りリストを返す
		2: パスを確認できなかったモジュールのコンマ区切りリストを返す
	第二引数は戻り値に説明文を付属するかどうかを指定
	0: 説明文なし
	1: 説明文あり
	第三引数以降は確認するモジュールのリスト
	 モジュール名は.DLLを省いても受け付け、大文字小文字を無視

===============================================================================
opacity.js

PPcまたはPPvの透過率を変更します。直接、値を設定できる他、弱め・強めの透過率を
ローテーションできます。

	第一引数は不透明度を指定。"0"を指定すると透過率をローテーションする
	第二引数は強めの不透明度(弱めの透過率)を指定 デフォルト値=90
	第三引数は弱めの不透明度(強めの透過率)を指定 デフォルト値=80

===============================================================================
print.js

文字情報をPPeで表示します。

	第一引数は改行コード
		crlf, lf ,cr
		またはdos, unix, mac
	第二引数はタイトル
	第三引数以降は行情報。一行ごとにコンマで区切る

===============================================================================
range_utf8.js(jscript)

utf8でエンコードされたファイルを読込み、指定した行範囲に対してメソッドを実行。
%'temp'およびS_ppm#global:cache以下のファイルのみ対象とします。
※行範囲は正確に指定してください。短かい語句を指定すると必要な行まで操作される
可能性があります。

	第一引数は対象となるファイル名
	第二引数は実行するメソッド名
		delete:  指定した行範囲を削除
		replace: 指定した行範囲を指定した文字列で置換
	第三引数は行範囲の開始文字列
	第四引数は行範囲の終了文字列
	第五引数以降は上書きする文字列。一行ごとにコンマで区切る

===============================================================================
read_utf8.js

utf8でエンコードされたファイルを読み込み、指定した関数を実行して返します。

	第一引数は対象となるファイル名
	第二引数は実行するメソッド名
		exists: 引数で指定した文字列が存在するかどうかを真偽値で返す
		read: ファイルデータを返す
	第三引数以降は実行するメソッドの引数を指定
	 複数の要素がある場合はコンマで区切る

===============================================================================
repository.js

リポジトリのブランチ名,ルートパス,HEADのハッシュをコンマ区切りで返します。

	第一引数は取得する値を指定可能
		branch: ブランチ名
		root: ルートパス
		head: コミットハッシュ
		指定なし: 全ての戻り値

===============================================================================
setsel.js

一行編集などで編集中のテキストの指定範囲を選択状態にします。
複数行を対象とした範囲指定が可能で、そのときはカーソル位置を起点とした
範囲選択になります。

	第一引数は選択範囲を正規表現で指定。全体を""で括る
		単一行	"(行頭から選択範囲までの文字列)(選択する文字列)"
		複数行	"(行頭からカーソル前)(選択する文字列)カーソル後方から終端"
	第二引数は対象とする行を指定。
		0: 単一行
		1: 複数行

===============================================================================
stdout.js(jscriptのみ)

指定したコマンドの出力結果を返します。凡そ1000文字の文字数制限があります。

	第一引数はコマンドを実行するディレクトリパス
	第二引数は外部コマンドの指定
	第三引数は出力の文字コードを指定
		1: UTF8

===============================================================================
stdoutw.js(jscriptのみ)

指定したコマンドの出力結果を一度ファイルに保存し、結果を読み取って返します。

	第一引数はコマンドを実行するディレクトリパス
	第二引数は外部コマンドの指定

===============================================================================
toggle_viewstyle.js

エントリリストの指定したコラムをトグルします。

	第一引数はコラムをJSON形式で指定
		"{"コラム番号": "viewstyle形式"}"

===============================================================================
spinner.js

コマンド実行後の待受け中、ステータス行にスピナーを表示します。

	第一引数はスピナーを表示するPPxのIDを指定
	第二引数はスピンの回転周期(ミリ秒)
	第三引数は待受け時間の上限(ミリ秒)
	第四引数はスピナーのタイプ。現在"dot"のみ

===============================================================================
version.js(jscriptのみ)

PPxの各種バージョン情報を読み取り、指定した条件を満たさない場合に
エラーメッセージを返します。

	第一引数はPPxバージョンの指定。バージョン未満はエラー
	第二引数はScriptのバージョンを指定。バージョン未満はエラー
	第三引数はPPxの文字型を指定
		0: 制限なし
		1: マルチバイト版はエラー
		2: ユニコード版はエラー
	第四引数はScriptの使用DLLを指定
		0: 制限なし
		1: JS9(5.7)以外はエラー
		2: JS9(5.8)以外はエラー
		3: Js9(ES5)以外はエラー
		4: Chakra(ES6)以外はエラー

===============================================================================
waitRun.js(※削除予定)

指定したプログラムが開始されるまで待機します。PPxの%Osや%Oiでは待機されない
プログラム用です。

	第一引数は何秒ごとに起動を確認するかミリ秒で指定
	第二引数は起動を確認する回数を指定
	第三引数はプログラムのクラス名を指定

===============================================================================
write_utf8.js

配列の一要素を一行として、指定したファイルにutf8エンコードで出力します。
%'temp'およびS_ppm#global:cache以下のファイルのみ対象とします。

	第一引数は対象となるファイル名
	第二引数は改行コード
		lf(unix): '\n'で改行
		cr(mac): '\r'で改行
		crlf(dos): '\r\n'で改行
	第三引数以降は行情報を一行区切りで指定
	 第三引数の値に FDC を指定した場合は %#FDC の値に置き換えられる

===============================================================================
see_pid.vbs

プロセスIDが存在するかどうかをチェックして真偽値を返します。

	第一引数はプロセスIDを指定

===============================================================================
see_process.vbs

スクリプトの実行時にプロセスが起動中かどうかをチェックして真偽値を返します。
待ち受け時間を設定した場合は、凡そ500ミリ秒ごとにプロセスをチェックし、プロセス
の起動を確認するか待ち受け時間経過で終了します。
さらにコマンドラインを指定した場合は、起動が確認できなければコマンドラインを
実行し、待ち受け時間経過か起動を確認するまで待機します。

	第一引数はプロセス名を指定
	第二引数は待ち受け時間(ミリ秒)を指定。デフォルト値:6000
	第三引数はコマンドラインを指定
	第四引数はコマンドラインの起動状態(WScript.Shell.Run(style))。デフォルト値:1

===============================================================================
get_entries.vbs

指定したディレクトリ内のファイル名をコンマ区切りで返します。

	第一引数はディレクトリパスを指定
	第二引数はファイル属性を指定
		both(default): ディレクトリとファイル
		dir: ディレクトリ
		file: ファイル
	第三引数はパスに含まれる文字列を指定

===============================================================================
count_entries.vbs

指定したディレクトリ内のエントリ数を返します。

	第一引数はディレクトリパスを指定
	第二引数はファイル属性を指定
		both(default): ディレクトリとファイル
		dir: ディレクトリ
		file: ファイル
	第三引数は検索数の上限を指定

===============================================================================
